package com.postread.controllers;

import com.postread.data.Reaction;
import com.postread.data.ReactionType;
import com.postread.security.User;
import com.postread.services.ReactionService;
import com.postread.repositories.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;

@Controller
@RequestMapping("/api/reactions")
public class ReactionController {

    @Autowired
    private ReactionService reactionService;

    @Autowired
    private UserRepository userRepository;

    // –ú–∞–ø–ø–∏–Ω–≥ —ç–º–æ–¥–∑–∏ –Ω–∞ –∫–æ–¥—ã —Ä–µ–∞–∫—Ü–∏–π
    private final Map<String, Integer> emojiToCode = Map.ofEntries(
            Map.entry("üëç", 1), Map.entry("üëé", 2), Map.entry("‚ù§Ô∏è", 3), Map.entry("üòÇ", 4),
            Map.entry("üò¢", 5), Map.entry("üò†", 6), Map.entry("üòÆ", 7), Map.entry("üî•", 8),
            Map.entry("ü§î", 9), Map.entry("üëè", 10), Map.entry("üòï", 11), Map.entry("üéâ", 12)
    );

    // –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–¥–æ–≤ –Ω–∞ —ç–º–æ–¥–∑–∏
    private final Map<Integer, String> codeToEmoji = Map.ofEntries(
            Map.entry(1, "üëç"), Map.entry(2, "üëé"), Map.entry(3, "‚ù§Ô∏è"), Map.entry(4, "üòÇ"),
            Map.entry(5, "üò¢"), Map.entry(6, "üò†"), Map.entry(7, "üòÆ"), Map.entry(8, "üî•"),
            Map.entry(9, "ü§î"), Map.entry(10, "üëè"), Map.entry(11, "üòï"), Map.entry(12, "üéâ")
    );

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–∞–∫–æ–π –∂–µ –º–µ—Ç–æ–¥ –∫–∞–∫ –≤ ArticleController)
    private User getCurrentUser() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        if (authentication != null && authentication.isAuthenticated() &&
                !authentication.getName().equals("anonymousUser")) {
            String username = authentication.getName();
            return userRepository.findByName(username)
                    .orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: " + username));
        }
        throw new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω");
    }

    @PostMapping("/article/{articleId}")
    public ResponseEntity<?> addReaction(
            @PathVariable Long articleId,
            @RequestParam String emoji) {

        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ SecurityContextHolder
            User user = getCurrentUser();

            Integer reactionCode = emojiToCode.get(emoji);
            if (reactionCode == null) {
                return ResponseEntity.badRequest().body(createErrorResponse("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è: " + emoji));
            }

            ReactionType reactionType = ReactionType.fromCode(reactionCode);
            Reaction reaction = reactionService.addOrUpdateReaction(user, articleId, reactionType);

            // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            Map<ReactionType, Long> stats = reactionService.getReactionStats(articleId);
            Integer userReaction = reaction.getType();

            return ResponseEntity.ok(createSuccessResponse(stats, userReaction));

        } catch (RuntimeException e) {
            return ResponseEntity.badRequest().body(createErrorResponse(e.getMessage()));
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.status(500).body(createErrorResponse("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"));
        }
    }

    @DeleteMapping("/article/{articleId}")
    public ResponseEntity<?> removeReaction(@PathVariable Long articleId) {

        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ SecurityContextHolder
            User user = getCurrentUser();

            reactionService.removeReaction(user, articleId);

            // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            Map<ReactionType, Long> stats = reactionService.getReactionStats(articleId);

            return ResponseEntity.ok(createSuccessResponse(stats, null));

        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.badRequest().body(createErrorResponse("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏: " + e.getMessage()));
        }
    }

    @GetMapping("/article/{articleId}/stats")
    public ResponseEntity<?> getReactionStats(@PathVariable Long articleId) {

        try {
            Map<ReactionType, Long> stats = reactionService.getReactionStats(articleId);
            Integer userReaction = null;

            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ SecurityContextHolder
            try {
                User user = getCurrentUser();
                userReaction = reactionService.getUserReaction(user, articleId)
                        .map(Reaction::getType)
                        .orElse(null);
            } catch (RuntimeException e) {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                userReaction = null;
            }

            return ResponseEntity.ok(createSuccessResponse(stats, userReaction));

        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.badRequest().body(createErrorResponse("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: " + e.getMessage()));
        }
    }

    private Map<String, Object> createSuccessResponse(Map<ReactionType, Long> stats, Integer userReaction) {
        Map<String, Object> response = new HashMap<>();
        response.put("success", true);

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        Map<String, Long> formattedStats = new HashMap<>();
        for (Map.Entry<ReactionType, Long> entry : stats.entrySet()) {
            String emoji = codeToEmoji.get(entry.getKey().getCode());
            if (emoji != null && entry.getValue() > 0) {
                formattedStats.put(emoji, entry.getValue());
            }
        }
        response.put("stats", formattedStats);
        response.put("userReaction", userReaction);

        return response;
    }

    private Map<String, Object> createErrorResponse(String error) {
        Map<String, Object> response = new HashMap<>();
        response.put("success", false);
        response.put("error", error);
        return response;
    }
}