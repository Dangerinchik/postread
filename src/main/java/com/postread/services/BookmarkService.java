package com.postread.services;

import com.postread.data.Bookmark;
import com.postread.data.Article;
import com.postread.security.User;
import com.postread.repositories.BookmarkRepository;
import com.postread.repositories.ArticleRepository;
import com.postread.repositories.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

import java.util.List;

@Service
@RequiredArgsConstructor
@Transactional(readOnly = true)
public class BookmarkService {

    private final BookmarkRepository bookmarkRepository;
    private final ArticleRepository articleRepository;
    private final UserRepository userRepository;

    // –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—å—é –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    @Transactional
    public boolean addBookmark(Long userId, Long articleId) {
        try {
            System.out.println("‚ûï BookmarkService: Adding bookmark - User ID: " + userId + ", Article ID: " + articleId);

            User user = userRepository.findById(userId)
                    .orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
            Article article = articleRepository.findById(articleId)
                    .orElseThrow(() -> new RuntimeException("–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ —É–∂–µ —Å—Ç–∞—Ç—å—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
            if (bookmarkRepository.existsByUserAndArticle(user.getId(), article.getId())) {
                System.out.println("‚ÑπÔ∏è BookmarkService: Bookmark already exists");
                return false;
            }

            Bookmark bookmark = new Bookmark();
            bookmark.setUser(user);
            bookmark.setArticle(article);

            bookmarkRepository.save(bookmark);
            System.out.println("‚úÖ BookmarkService: Bookmark added successfully");
            return true;
        } catch (Exception e) {
            System.err.println("‚ùå BookmarkService: Error adding bookmark: " + e.getMessage());
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: " + e.getMessage());
        }
    }

    // –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—å—é –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    @Transactional
    public boolean removeBookmark(Long userId, Long articleId) {
        try {
            System.out.println("‚ûñ BookmarkService: Removing bookmark - User ID: " + userId + ", Article ID: " + articleId);

            Optional<Bookmark> bookmark = bookmarkRepository.findByUserAndArticle(
                    userRepository.findById(userId).orElse(null),
                    articleRepository.findById(articleId).orElse(null)
            );

            if (bookmark.isPresent()) {
                bookmarkRepository.delete(bookmark.get());
                System.out.println("‚úÖ BookmarkService: Bookmark removed successfully");
                return true;
            }
            System.out.println("‚ÑπÔ∏è BookmarkService: Bookmark not found");
            return false;
        } catch (Exception e) {
            System.err.println("‚ùå BookmarkService: Error removing bookmark: " + e.getMessage());
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: " + e.getMessage());
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ —Å—Ç–∞—Ç—å—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ (–±–µ–∑ –≤—ã–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π)
    public boolean isArticleBookmarked(Long userId, Long articleId) {
        try {
            System.out.println("üîç BookmarkService: Checking bookmark status - User ID: " + userId + ", Article ID: " + articleId);

            User user = userRepository.findById(userId).orElse(null);
            Article article = articleRepository.findById(articleId).orElse(null);

            if (user == null || article == null) {
                System.out.println("‚ö†Ô∏è BookmarkService: User or article not found");
                return false;
            }

            boolean exists = bookmarkRepository.existsByUserAndArticle(user.getId(), article.getId());
            System.out.println("‚úÖ BookmarkService: Bookmark exists: " + exists);
            return exists;
        } catch (Exception e) {
            System.err.println("‚ùå BookmarkService: Error checking bookmark status: " + e.getMessage());
            return false;
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    public List<Bookmark> getUserBookmarks(Long userId) {
        System.out.println("üìö BookmarkService: Getting user bookmarks for user ID: " + userId);

        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        List<Bookmark> bookmarks = bookmarkRepository.findByUserWithArticles(user);
        System.out.println("‚úÖ BookmarkService: Found " + bookmarks.size() + " bookmarks");
        return bookmarks;
    }

    // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
    public long getBookmarksCount(Long userId) {
        System.out.println("üî¢ BookmarkService: Getting bookmarks count for user ID: " + userId);

        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        long count = bookmarkRepository.countByUser(user);
        System.out.println("‚úÖ BookmarkService: Bookmarks count: " + count);
        return count;
    }

    @Transactional
    public boolean toggleBookmark(Long userId, Long articleId) {
        System.out.println("üîÑ BookmarkService: Toggling bookmark - User ID: " + userId + ", Article ID: " + articleId);

        try {
            // –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ç–∞—Ç—å–∏
            User user = userRepository.findById(userId).orElse(null);
            Article article = articleRepository.findById(articleId).orElse(null);

            System.out.println("üë§ User found: " + (user != null ? user.getName() : "NULL"));
            System.out.println("üìÑ Article found: " + (article != null ? article.getTitle() : "NULL"));

            if (user == null || article == null) {
                System.out.println("‚ùå User or Article not found - cannot toggle bookmark");
                return false;
            }

            boolean currentlyBookmarked = bookmarkRepository.existsByUserAndArticle(user.getId(), article.getId());
            System.out.println("üìä Current bookmark status: " + currentlyBookmarked);

            if (currentlyBookmarked) {
                System.out.println("‚ûñ Removing existing bookmark...");
                bookmarkRepository.deleteByUserAndArticle(user.getId(), article.getId());
                System.out.println("‚úÖ Bookmark removed");
                return false;
            } else {
                System.out.println("‚ûï Creating new bookmark...");
                Bookmark bookmark = new Bookmark();
                bookmark.setUser(user);
                bookmark.setArticle(article);

                Bookmark savedBookmark = bookmarkRepository.save(bookmark);
                System.out.println("‚úÖ Bookmark created with ID: " + savedBookmark.getId());
                return true;
            }
        } catch (Exception e) {
            System.err.println("‚ùå ERROR in toggleBookmark: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }
}